{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getRandomColor","Math","random","toString","slice","App","_useState","useState","_useState2","Object","slicedToArray","color","setColor","_useState3","_useState4","choices","setChoices","_useState5","_useState6","isCorrect","setIsCorrect","_useState7","_useState8","numGuesses","setNumGuesses","_useState9","_useState10","correctGuesses","setCorrectGuesses","updateGame","curColor","sort","useEffect","react","createElement","className","style","background","height","map","choice","onClick","guess","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","react_default","a","StrictMode","src_App"],"mappings":"6LAGMA,SAAiB,WAErB,MAAO,KADkB,QAAhBC,KAAKC,SAAqB,KAASC,SAAS,IACtCC,MAAM,EAAG,KA8DXC,MA3Df,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEiBN,mBAAS,IAF1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEGE,EAFHF,EAAA,GAAAG,EAGqBV,mBAAS,MAH9BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGKE,EAHLF,EAAA,GAAAG,EAIuBd,mBAAS,GAJhCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAINE,EAJMD,EAAA,GAIME,EAJNF,EAAA,GAAAG,EAK+BlB,mBAAS,GALxCmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKNE,EALMD,EAAA,GAKUE,EALVF,EAAA,GAOPG,EAAa,WACjB,IAAMC,EAAW9B,IACjBY,EAASkB,GACTd,EACE,CAACc,EAAU9B,IAAkBA,KAAkB+B,KAC7C,kBAAM9B,KAAKC,SAAW,OAoB5B,OAJA8B,oBAAU,WACRH,KACC,IAGDI,EAAA,MAAAC,cAAA,OAAKC,UAAU,QACbF,EAAA,MAAAC,cAAA,WACED,EAAA,MAAAC,cAAA,OAAKC,UAAU,cAAf,oBACAF,EAAA,MAAAC,cAAA,OAAKC,UAAU,WAAWC,MAAO,CAAEC,WAAY1B,KAE/CsB,EAAA,MAAAC,cAAA,OAAKE,MAAO,CAAEE,OAAQ,KAErBvB,EAAQwB,IAAI,SAACC,GACZ,OAAOP,EAAA,MAAAC,cAAA,UAAQO,QAAS,kBAxBZC,EAwB6BF,EAvB/ChB,EAAcD,EAAa,QACvBmB,IAAU/B,GACZS,GAAa,GACbQ,EAAkBD,EAAiB,GACnCE,KAEAT,GAAa,IAPE,IAACsB,IAwBuCF,KAGrDP,EAAA,MAAAC,cAAA,OAAKC,UAAU,iBAAf,kBAA+CZ,GAC/CU,EAAA,MAAAC,cAAA,OAAKC,UAAU,iBAAf,oBAAiDR,GAElC,OAAdR,GACCc,EAAA,MAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAAEzB,MAAOA,IAA5C,wBAIa,IAAdQ,GAAuBc,EAAA,MAAAC,cAAA,OAAKC,UAAU,SAAf,sBACT,IAAdhB,GAAsBc,EAAA,MAAAC,cAAA,OAAKC,UAAU,SAAf,uBCjDhBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHC,EAAAC,EAAA5B,cAAC2B,EAAAC,EAAMC,WAAP,KACEF,EAAAC,EAAA5B,cAAC8B,EAAD,QAOJrB","file":"static/js/main.59e6e6a8.chunk.js","sourcesContent":["import \"./App.css\";\nimport { React, useEffect, useState } from \"react\";\n\nconst getRandomColor = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return \"#\" + n.slice(0, 6);\n};\n\nfunction App() {\n  const [color, setColor] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [numGuesses, setNumGuesses] = useState(0);\n  const [correctGuesses, setCorrectGuesses] = useState(0);\n\n  const updateGame = () => {\n    const curColor = getRandomColor();\n    setColor(curColor);\n    setChoices(\n      [curColor, getRandomColor(), getRandomColor()].sort(\n        () => Math.random() - 0.5\n      )\n    );\n  };\n\n  const checkGuess = (guess) => {\n    setNumGuesses(numGuesses + 1);\n    if (guess === color) {\n      setIsCorrect(true);\n      setCorrectGuesses(correctGuesses + 1);\n      updateGame();\n    } else {\n      setIsCorrect(false);\n    }\n  };\n\n  useEffect(() => {\n    updateGame();\n  }, []);\n\n  return (\n    <div className=\"game\">\n      <div>\n        <div className=\"title-text\">Guess the Color!</div>\n        <div className=\"to-guess\" style={{ background: color }}></div>\n\n        <div style={{ height: 5 }}></div>\n\n        {choices.map((choice) => {\n          return <button onClick={() => checkGuess(choice)}>{choice}</button>;\n        })}\n\n        <div className=\"guesses-stats\">Total Guesses: {numGuesses}</div>\n        <div className=\"guesses-stats\">Correct Guesses: {correctGuesses}</div>\n\n        {isCorrect === null && (\n          <div className=\"start-text\" style={{ color: color }}>\n            What Color is This?\n          </div>\n        )}\n        {isCorrect === false && <div className=\"wrong\">Wrong, Try Again!</div>}\n        {isCorrect === true && <div className=\"right\">Right, Good Job!</div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}